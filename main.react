import React, { useState, useEffect } from 'react';
import { Search, Filter, Download, Users, Mail, Phone, Building, Globe, Star, AlertCircle, CheckCircle, Clock, TrendingUp, Target, Zap } from 'lucide-react';

const EnhancedLeadGenTool = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [activeFilter, setActiveFilter] = useState('all');
  const [leads, setLeads] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedLeads, setSelectedLeads] = useState(new Set());
  const [enrichmentData, setEnrichmentData] = useState({});
  const [showEnrichment, setShowEnrichment] = useState(false);
  const [currentTab, setCurrentTab] = useState('dashboard');

  // Simulated lead data with enhanced business intelligence
  const sampleLeads = [
    {
      id: 1,
      company: "TechFlow Solutions",
      contact: "Sarah Chen",
      title: "VP of Sales",
      email: "sarah.chen@techflow.com",
      phone: "+1 (555) 123-4567",
      industry: "SaaS",
      employeeCount: "50-200",
      revenue: "$10M-$50M",
      location: "San Francisco, CA",
      website: "techflow.com",
      lastActivity: "2 days ago",
      leadScore: 85,
      priority: "High",
      tags: ["SaaS", "Growing", "Tech"],
      socialMedia: {
        linkedin: "linkedin.com/company/techflow",
        twitter: "@techflow"
      },
      recentNews: "Recently raised Series A funding",
      painPoints: ["Scaling challenges", "Integration issues"],
      buyingSignals: ["Hiring sales team", "Product expansion"],
      competitorAnalysis: "Uses Salesforce, looking for alternatives"
    },
    {
      id: 2,
      company: "GrowthMetrics Inc",
      contact: "Michael Rodriguez",
      title: "CEO",
      email: "m.rodriguez@growthmetrics.com",
      phone: "+1 (555) 987-6543",
      industry: "Marketing Analytics",
      employeeCount: "20-50",
      revenue: "$5M-$10M",
      location: "Austin, TX",
      website: "growthmetrics.com",
      lastActivity: "1 week ago",
      leadScore: 92,
      priority: "High",
      tags: ["Analytics", "B2B", "Growing"],
      socialMedia: {
        linkedin: "linkedin.com/company/growthmetrics",
        twitter: "@growthmetrics"
      },
      recentNews: "Acquired two smaller analytics firms",
      painPoints: ["Data integration", "Reporting efficiency"],
      buyingSignals: ["Expanding team", "New office lease"],
      competitorAnalysis: "Currently using HubSpot and Mixpanel"
    },
    {
      id: 3,
      company: "CloudFirst Systems",
      contact: "Jennifer Park",
      title: "CTO",
      email: "j.park@cloudfirst.com",
      phone: "+1 (555) 456-7890",
      industry: "Cloud Infrastructure",
      employeeCount: "100-500",
      revenue: "$20M-$100M",
      location: "Seattle, WA",
      website: "cloudfirst.com",
      lastActivity: "3 days ago",
      leadScore: 78,
      priority: "Medium",
      tags: ["Cloud", "Infrastructure", "Enterprise"],
      socialMedia: {
        linkedin: "linkedin.com/company/cloudfirst",
        twitter: "@cloudfirst"
      },
      recentNews: "Announced partnership with AWS",
      painPoints: ["Security compliance", "Cost optimization"],
      buyingSignals: ["Security audit", "Budget allocation"],
      competitorAnalysis: "Evaluating alternatives to current stack"
    }
  ];

  const filterOptions = [
    { id: 'all', label: 'All Leads', count: sampleLeads.length },
    { id: 'high', label: 'High Priority', count: sampleLeads.filter(l => l.priority === 'High').length },
    { id: 'saas', label: 'SaaS Companies', count: sampleLeads.filter(l => l.industry === 'SaaS').length },
    { id: 'recent', label: 'Recent Activity', count: sampleLeads.filter(l => l.lastActivity.includes('day')).length }
  ];

  useEffect(() => {
    // Simulate initial data load
    setTimeout(() => {
      setLeads(sampleLeads);
    }, 1000);
  }, []);

  const handleSearch = () => {
    setLoading(true);
    // Simulate search with enhanced filtering
    setTimeout(() => {
      const filtered = sampleLeads.filter(lead => 
        lead.company.toLowerCase().includes(searchQuery.toLowerCase()) ||
        lead.contact.toLowerCase().includes(searchQuery.toLowerCase()) ||
        lead.industry.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setLeads(filtered);
      setLoading(false);
    }, 1500);
  };

  const handleFilter = (filterType) => {
    setActiveFilter(filterType);
    let filtered = [...sampleLeads];
    
    switch(filterType) {
      case 'high':
        filtered = filtered.filter(l => l.priority === 'High');
        break;
      case 'saas':
        filtered = filtered.filter(l => l.industry === 'SaaS');
        break;
      case 'recent':
        filtered = filtered.filter(l => l.lastActivity.includes('day'));
        break;
      default:
        break;
    }
    
    setLeads(filtered);
  };

  const handleEnrichLead = (leadId) => {
    setLoading(true);
    // Simulate AI-powered enrichment
    setTimeout(() => {
      const enrichedData = {
        [leadId]: {
          additionalContacts: [
            { name: "David Kim", title: "Head of Engineering", email: "d.kim@company.com" },
            { name: "Lisa Johnson", title: "Marketing Director", email: "l.johnson@company.com" }
          ],
          technologyStack: ["React", "Node.js", "AWS", "MongoDB"],
          recentFunding: "$15M Series B",
          keyDecisionMakers: ["CEO", "CTO", "VP Sales"],
          idealOutreachTime: "Tuesday-Thursday, 10-11 AM PST",
          personalizedMessage: "Focus on scalability and integration solutions based on their recent growth."
        }
      };
      setEnrichmentData(prev => ({ ...prev, ...enrichedData }));
      setLoading(false);
      setShowEnrichment(true);
    }, 2000);
  };

  const handleSelectLead = (leadId) => {
    const newSelected = new Set(selectedLeads);
    if (newSelected.has(leadId)) {
      newSelected.delete(leadId);
    } else {
      newSelected.add(leadId);
    }
    setSelectedLeads(newSelected);
  };

  const handleBulkExport = () => {
    const selectedLeadData = leads.filter(lead => selectedLeads.has(lead.id));
    const dataStr = JSON.stringify(selectedLeadData, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `leads_export_${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'High': return 'text-red-600 bg-red-50';
      case 'Medium': return 'text-yellow-600 bg-yellow-50';
      case 'Low': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getScoreColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const DashboardView = () => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">Total Leads</p>
            <p className="text-2xl font-bold text-gray-900">{leads.length}</p>
          </div>
          <Users className="h-8 w-8 text-blue-600" />
        </div>
      </div>
      
      <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">High Priority</p>
            <p className="text-2xl font-bold text-gray-900">{leads.filter(l => l.priority === 'High').length}</p>
          </div>
          <Target className="h-8 w-8 text-red-600" />
        </div>
      </div>
      
      <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">Avg Lead Score</p>
            <p className="text-2xl font-bold text-gray-900">{Math.round(leads.reduce((acc, lead) => acc + lead.leadScore, 0) / leads.length) || 0}</p>
          </div>
          <TrendingUp className="h-8 w-8 text-green-600" />
        </div>
      </div>
      
      <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">Selected</p>
            <p className="text-2xl font-bold text-gray-900">{selectedLeads.size}</p>
          </div>
          <CheckCircle className="h-8 w-8 text-purple-600" />
        </div>
      </div>
    </div>
  );

  const LeadCard = ({ lead }) => (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3">
          <input
            type="checkbox"
            checked={selectedLeads.has(lead.id)}
            onChange={() => handleSelectLead(lead.id)}
            className="h-4 w-4 text-blue-600 rounded border-gray-300"
          />
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{lead.company}</h3>
            <p className="text-sm text-gray-600">{lead.contact} â€¢ {lead.title}</p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(lead.priority)}`}>
            {lead.priority}
          </span>
          <span className={`text-sm font-bold ${getScoreColor(lead.leadScore)}`}>
            {lead.leadScore}
          </span>
        </div>
      </div>
      
      <div className="grid grid-cols-2 gap-4 text-sm text-gray-600 mb-4">
        <div className="flex items-center space-x-2">
          <Mail className="h-4 w-4" />
          <span>{lead.email}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Phone className="h-4 w-4" />
          <span>{lead.phone}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Building className="h-4 w-4" />
          <span>{lead.industry} â€¢ {lead.employeeCount}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Globe className="h-4 w-4" />
          <span>{lead.location}</span>
        </div>
      </div>
      
      <div className="mb-4">
        <p className="text-sm text-gray-600 mb-2">Recent Activity:</p>
        <p className="text-sm font-medium text-gray-900">{lead.recentNews}</p>
      </div>
      
      <div className="flex flex-wrap gap-2 mb-4">
        {lead.tags.map((tag, index) => (
          <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
            {tag}
          </span>
        ))}
      </div>
      
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2 text-sm text-gray-500">
          <Clock className="h-4 w-4" />
          <span>Updated {lead.lastActivity}</span>
        </div>
        <button
          onClick={() => handleEnrichLead(lead.id)}
          disabled={loading}
          className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
        >
          <Zap className="h-4 w-4" />
          <span>Enrich</span>
        </button>
      </div>
      
      {enrichmentData[lead.id] && (
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
          <h4 className="font-semibold text-gray-900 mb-2">AI Enrichment Results:</h4>
          <div className="space-y-2 text-sm">
            <p><strong>Technology Stack:</strong> {enrichmentData[lead.id].technologyStack.join(', ')}</p>
            <p><strong>Best Outreach Time:</strong> {enrichmentData[lead.id].idealOutreachTime}</p>
            <p><strong>Personalized Note:</strong> {enrichmentData[lead.id].personalizedMessage}</p>
          </div>
        </div>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Zap className="h-8 w-8 text-blue-600" />
                <h1 className="text-2xl font-bold text-gray-900">LeadGenAI Pro</h1>
              </div>
              <span className="text-sm text-gray-500">Enhanced by Caprae Capital</span>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setCurrentTab('dashboard')}
                className={`px-4 py-2 rounded-lg ${currentTab === 'dashboard' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'}`}
              >
                Dashboard
              </button>
              <button
                onClick={() => setCurrentTab('leads')}
                className={`px-4 py-2 rounded-lg ${currentTab === 'leads' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'}`}
              >
                Leads
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {currentTab === 'dashboard' && <DashboardView />}
        
        {/* Search and Filter Section */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search companies, contacts, or industries..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <button
              onClick={handleSearch}
              disabled={loading}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center space-x-2"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Searching...</span>
                </>
              ) : (
                <>
                  <Search className="h-4 w-4" />
                  <span>Search</span>
                </>
              )}
            </button>
          </div>
          
          {/* Filter Tabs */}
          <div className="flex flex-wrap gap-2 mb-4">
            {filterOptions.map((filter) => (
              <button
                key={filter.id}
                onClick={() => handleFilter(filter.id)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  activeFilter === filter.id 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {filter.label} ({filter.count})
              </button>
            ))}
          </div>
          
          {/* Bulk Actions */}
          {selectedLeads.size > 0 && (
            <div className="flex items-center justify-between bg-blue-50 p-4 rounded-lg">
              <span className="text-sm font-medium text-blue-900">
                {selectedLeads.size} lead{selectedLeads.size !== 1 ? 's' : ''} selected
              </span>
              <button
                onClick={handleBulkExport}
                className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Download className="h-4 w-4" />
                <span>Export Selected</span>
              </button>
            </div>
          )}
        </div>

        {/* Leads Grid */}
        {currentTab === 'leads' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {leads.map((lead) => (
              <LeadCard key={lead.id} lead={lead} />
            ))}
          </div>
        )}
        
        {leads.length === 0 && !loading && (
          <div className="text-center py-12">
            <AlertCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No leads found</h3>
            <p className="text-gray-500">Try adjusting your search or filter criteria</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default EnhancedLeadGenTool;
